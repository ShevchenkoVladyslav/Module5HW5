import { Container } from 'inversify';
import DefaultAuthenticationService from '../services/AuthenticationService';
import DefaultHttpService from '../services/HttpService';
import DefaultRegistrationService from '../services/RegistrationService';
import DefaultResourceService from '../services/ResourceService';
import DefaultUserService from '../services/UserService';
import HomePageStore from '../stores/HomePageStore';
import LoginStore from '../stores/LoginStore';
import ownTypes from './ownTypes';
import RegistrationStore from '../stores/RegistrationStore';
import ResourcesStore from '../stores/ResourcesStore';
import ResourceStore from '../stores/ResourceStore';
import type { AuthenticationService } from '../services/AuthenticationService';
import type { HttpService } from '../services/HttpService';
import type { RegistrationService } from '../services/RegistrationService';
import type { ResourceService } from '../services/ResourceService';
import type { UserService } from '../services/UserService';
import UsersStore from '../stores/UsersStore';
import UserStore from '../stores/UserStore';

export const container = new Container();
container.bind<AuthenticationService>(ownTypes.authenticationService).to(DefaultAuthenticationService).inSingletonScope();
container.bind<HomePageStore>(ownTypes.homePageStore).to(HomePageStore).inTransientScope();
container.bind<HttpService>(ownTypes.httpService).to(DefaultHttpService).inSingletonScope();
container.bind<LoginStore>(ownTypes.loginStore).to(LoginStore).inTransientScope();
container.bind<RegistrationService>(ownTypes.registrationService).to(DefaultRegistrationService).inSingletonScope();
container.bind<RegistrationStore>(ownTypes.registrationStore).to(RegistrationStore).inTransientScope();
container.bind<ResourceService>(ownTypes.resourceService).to(DefaultResourceService).inSingletonScope();
container.bind<ResourcesStore>(ownTypes.resourcesStore).to(ResourcesStore).inTransientScope();
container.bind<ResourceStore>(ownTypes.resourceStore).to(ResourceStore).inTransientScope();
container.bind<UserService>(ownTypes.userService).to(DefaultUserService).inSingletonScope();
container.bind<UsersStore>(ownTypes.usersStore).to(UsersStore).inTransientScope();
container.bind<UserStore>(ownTypes.userStore).to(UserStore).inTransientScope();
